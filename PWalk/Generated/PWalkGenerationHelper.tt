<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#+
enum ParametricKind
{
	NonParametric,
	Subjective,
	Contextual,
}

[Flags]
enum OptionalParameter
{
	None = 0x00000000,
	UserData = 0x00000001 << 0,
	Parameters = 0x00000001 << 1,
	Step = 0x00000001 << 2,
	DefaultEveryNode = UserData | Step,
	DefaultEveryNodeIf = UserData | Step,
	DefaultTargetType = UserData | Step,
	DefaultMarkedWith = UserData | Step,
	DefaultInvokeMarkedWith = Parameters | Step,
}

static class Helper
{
	public const string NewLine = "\r\n";
	public const string MethodIndent = "\t\t";
	public const string DocumentCommentHeader = "/// ";
	
	public static string GenerateProcessTypeName(ParametricKind parametric) => GenerateProcessTypeName("object", parametric);
	
	public static string GenerateProcessTypeName(string subjectTypeName, ParametricKind parametric)
	{
		switch (parametric)
		{
			case ParametricKind.NonParametric:
				return "Action";
			case ParametricKind.Subjective:
				return $"Action<{subjectTypeName}>";
			case ParametricKind.Contextual:
				return $"Action<{subjectTypeName}, PWalkContext>";
		}
		return null;
	}
	
	public static string GenerateConditionTypeName(ParametricKind parametric) => GenerateConditionTypeName("object", parametric);

	public static string GenerateConditionTypeName(string subjectTypeName, ParametricKind parametric)
	{
		switch (parametric)
		{
			case ParametricKind.NonParametric:
				return "Func<bool>";
			case ParametricKind.Subjective:
				return $"Func<{subjectTypeName}, bool>";
			case ParametricKind.Contextual:
				return $"Func<{subjectTypeName}, PWalkContext, bool>";
		}
		return null;
	}

	public static string GenerateEveryNodeDocumentComment(OptionalParameter parameters = OptionalParameter.DefaultEveryNode)
	{
		var contents = GenerateSummaryContents();
		contents = contents.Append(GenerateParamProcessContent());
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "ノード毎処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "探索するノードごとに処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents
	}
	
	public static string GenerateEveryNodeIfDocumentComment(OptionalParameter parameters = OptionalParameter.DefaultEveryNodeIf)
	{
		var contents = GenerateSummaryContents();
		contents = contents.Append(GenerateParamConditionContent());
		contents = contents.Append(GenerateParamProcessContent());
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "該当ノード処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "探索するノードが条件に該当する場合、処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents

		#region method GenerateParamConditionContent
		string GenerateParamConditionContent()
		{
			return GenerateDocumentCommentContent("param", ("name", "condition"), "条件");
		}
		#endregion // method GenerateParamConditionContent
	}
	
	public static string GenerateTargetTypeDocumentComment(OptionalParameter parameters = OptionalParameter.DefaultTargetType)
	{
		var contents = GenerateSummaryContents();
		contents = contents.Append(GenerateParamProcessContent());
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "型対象処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "入力された型が見つかった場合、それに対する処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents
	}
	
	public static string GenerateTargetTypeDocumentComment(int rank, OptionalParameter parameters = OptionalParameter.DefaultTargetType)
	{
		var contents = GenerateSummaryContents();
		for (var index = 1; index <= rank; ++index)
		{
			contents = contents.Append(GenerateParamProcessContent("型", index));
		}
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "型対象処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "入力された型が見つかった場合、それに対する処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents
	}
	
	public static string GenerateMarkedWithDocumentComment(OptionalParameter parameters = OptionalParameter.DefaultMarkedWith)
	{
		var contents = GenerateSummaryContents();
		contents = contents.Append(GenerateParamProcessContent());
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "標識対象処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "入力された標識属性が見つかった場合、それに対する処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents
	}
	
	public static string GenerateMarkedWithDocumentComment(int rank, OptionalParameter parameters = OptionalParameter.DefaultMarkedWith)
	{
		var contents = GenerateSummaryContents();
		for (var index = 1; index <= rank; ++index)
		{
			contents = contents.Append(GenerateParamProcessContent("属性", index));
		}
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.UserData) == OptionalParameter.UserData)
		{
			contents = contents.Append(GenerateParamUserDataContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		contents = contents.Append(GenerateExceptionArgumentNullContent());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "標識対象処理の実行", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "入力された標識属性が見つかった場合、それに対する処理を実行します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents
	}
	
	public static string GenerateInvokeMarkedWithDocumentComment(OptionalParameter parameters = OptionalParameter.DefaultInvokeMarkedWith)
	{
		var contents = GenerateSummaryContents();
		contents = contents.Append(GenerateParamSubjectContent());
		if ((parameters & OptionalParameter.Parameters) == OptionalParameter.Parameters)
		{
			contents = contents.Append(GenerateParamParametersContent());
		}
		if ((parameters & OptionalParameter.Step) == OptionalParameter.Step)
		{
			contents = contents.Append(GenerateParamStepContent());
		}
		contents = contents.Append(GenerateParamOptionsContent());
		contents = contents.Concat(GenerateRemarksContents());
		return GenerateDocumentComment(contents);
		
		#region method GenerateSummaryContents
		IEnumerable<string> GenerateSummaryContents()
		{
			string[] lines = { "", "標識対象関数の呼び出し", "", };
			return GenerateDocumentCommentContents("summary", lines);
		}
		#endregion // method GenerateSummaryContents
		
		#region method GenerateRemarksContents
		IEnumerable<string> GenerateRemarksContents()
		{
			string[] lines = { "", "入力された属性がついた関数かイベントを呼び出します。", "", };
			return GenerateDocumentCommentContents("remarks", lines);
		}
		#endregion // method GenerateRemarksContents

		#region method GenerateParamParametersContent
		string GenerateParamParametersContent()
		{
			return GenerateDocumentCommentContent("param", ("name", "parameters"), "呼び出し引数");
		}
		#endregion // method GenerateParamParametersContent
	}
	
	#region private members
	private static string GenerateDocumentComment(IEnumerable<string> lines)
	{
		const string Format = MethodIndent + DocumentCommentHeader + "{0}" + NewLine;
		var builder = new StringBuilder();
		foreach (var line in lines)
		{
			builder.AppendFormat(Format, line);
		}
		return builder.ToString();
	}
	
	private static string GenerateHeadTag(string tag, IEnumerable<(string, string)> attributes = null)
	{
		var builder = new StringBuilder("<");
		builder.Append(tag);
		foreach ((string name, string value) in attributes)
		{
			builder.Append($" {name}=\"{value}\"");
		}
		builder.Append(">");
		return builder.ToString();
	}
	
	private static string GenerateTailTag(string tag)
	{
		return $"</{tag}>";
	}
	
	private static string GenerateDocumentCommentContent(string tag, string line)
	{
		return GenerateDocumentCommentContent(tag, Enumerable.Empty<(string, string)>(), line);
	}

	private static string GenerateDocumentCommentContent(string tag, (string, string) attribute, string line)
	{
		return GenerateDocumentCommentContent(tag, Enumerate(attribute), line);

		#region method Enumerate
		IEnumerable<(string, string)> Enumerate((string, string) attribute)
		{
			yield return attribute;
		}
		#endregion // method Enumerate
	}

	private static string GenerateDocumentCommentContent(string tag, IEnumerable<(string, string)> attributes, string line)
	{
		return GenerateHeadTag(tag, attributes) + line + GenerateTailTag(tag);
	}
	
	private static IEnumerable<string> GenerateDocumentCommentContents(string tag, IEnumerable<string> lines)
	{
		return GenerateDocumentCommentContents(tag, Enumerable.Empty<(string, string)>(), lines);
	}

	private static IEnumerable<string> GenerateDocumentCommentContents(string tag, (string, string) attribute, IEnumerable<string> lines)
	{
		return GenerateDocumentCommentContents(tag, Enumerate(attribute), lines);

		#region method Enumerate
		IEnumerable<(string, string)> Enumerate((string, string) attribute)
		{
			yield return attribute;
		}
		#endregion // method Enumerate
	}

	private static IEnumerable<string> GenerateDocumentCommentContents(string tag, IEnumerable<(string, string)> attributes, IEnumerable<string> lines)
	{
		var last = GenerateHeadTag(tag, attributes);
		var enumerator = lines.GetEnumerator();
		if (enumerator.MoveNext())
		{
			last += enumerator.Current;
			while (enumerator.MoveNext())
			{
				yield return last;
				last = enumerator.Current;
			}
		}
		yield return last + GenerateTailTag(tag);
	}
	
	private static string GenerateParamProcessContent()
	{
		return GenerateDocumentCommentContent("param", ("name", "process"), "処理");
	}
	
	private static string GenerateParamProcessContent(string targetName, int index)
	{
		return GenerateDocumentCommentContent("param", ("name", $"process{index}"), $"{targetName} {index} への処理");
	}

	private static string GenerateParamSubjectContent()
	{
		return GenerateDocumentCommentContent("param", ("name", "subject"), "探索の根");
	}

	private static string GenerateParamUserDataContent()
	{
		return GenerateDocumentCommentContent("param", ("name", "userData"), "任意データ");
	}

	private static string GenerateParamStepContent()
	{
		return GenerateDocumentCommentContent("param", ("name", "step"), "探索距離");
	}

	private static string GenerateParamOptionsContent()
	{
		return GenerateDocumentCommentContent("param", ("name", "options"), "オプション動作");
	}

	private static string GenerateExceptionArgumentNullContent()
	{
		return GenerateDocumentCommentContent("exception", ("cref", "System.ArgumentNullException"), "入力処理が null");
	}
	#endregion // private members
}
#>