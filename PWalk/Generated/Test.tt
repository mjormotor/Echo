<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="$(DevEnvDir)PrivateAssemblies\System.Collections.Immutable.dll" #>
<#@ assembly name="$(NuGetPackageRoot)microsoft.codeanalysis.common\3.5.0\lib\netstandard2.0\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(NuGetPackageRoot)microsoft.codeanalysis.csharp\3.5.0\lib\netstandard2.0\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ assembly name="$(TargetDir)Echo.Core.dll" #>
<#@ assembly name="$(TargetDir)Echo.PWalk.dll" #>
<#@ import namespace="Echo" #>
<#@ import namespace="Echo.PWalkService" #>
<#@ output extension=".Generated.cs" #>
<#
string GenerateManagerCode(SyntaxTree tree)
{
	string ret = null;
	if (tree != null)
	{
		var root = tree.GetRoot() as CompilationUnitSyntax;
		if (root != null)
		{
			var generator = new ManagerCodeGenerator();
			var result = generator.Visit(tree.GetRoot());
			ret = result.ToString();
		}
	}

	return ret;
}

string GenerateCode(SyntaxTree tree)
{
	string ret = null;
	if (tree != null)
	{
		var root = tree.GetRoot() as CompilationUnitSyntax;
		if (root != null)
		{
			var generator = new CodeGenerator();
			var result = generator.Visit(tree.GetRoot());
			ret = result.ToString();
		}
	}

	return ret;
}

var trace = new StackTrace(true);
var frame = trace.GetFrame(0);
var filePath = frame.GetFileName();
var directoryPath = Path.GetDirectoryName(filePath);
var targetDirectoryPath = Path.GetDirectoryName(directoryPath);
var targetFilePath = Path.Combine(targetDirectoryPath, "TestManager.cs");
if (File.Exists(targetFilePath))
{
	var text = File.ReadAllText(targetFilePath);
	var tree = CSharpSyntaxTree.ParseText(text, null, targetFilePath);
	if (tree != null)
	{
		var managerCode = GenerateManagerCode(tree);
		if (!string.IsNullOrEmpty(managerCode))
		{
			File.WriteAllText(Path.Combine(directoryPath, "TestManager.Generated.cs"),  $"/*\r\n{managerCode}\r\n*/");

			var code = GenerateCode(tree);
			if (!string.IsNullOrEmpty(code))
			{
#>
/*
<#= code #>
*/
<#
			}
		}
	}
}
#>
<#+
class CodeGenerator : CSharpSyntaxRewriter
{
}
#>
<#+
class ManagerCodeGenerator : CSharpSyntaxRewriter
{
}
#>